/*
 * generated by Xtext 2.10.0
 */
package org.xtext.branselic.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.branselic.ide.contentassist.antlr.internal.InternalConfiguratorLangParser;
import org.xtext.branselic.services.ConfiguratorLangGrammarAccess;

public class ConfiguratorLangParser extends AbstractContentAssistParser {

	@Inject
	private ConfiguratorLangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalConfiguratorLangParser createParser() {
		InternalConfiguratorLangParser result = new InternalConfiguratorLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOperatorAccess().getValueAlternatives_2_0(), "rule__Operator__ValueAlternatives_2_0");
					put(grammarAccess.getOpSymbolAccess().getAlternatives(), "rule__OpSymbol__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getSimpleBooleanAccess().getAlternatives(), "rule__SimpleBoolean__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getBoolStringAccess().getAlternatives(), "rule__BoolString__Alternatives");
					put(grammarAccess.getNLAccess().getAlternatives(), "rule__NL__Alternatives");
					put(grammarAccess.getConfiguratorModelAccess().getGroup(), "rule__ConfiguratorModel__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getOperatorAccess().getGroup(), "rule__Operator__Group__0");
					put(grammarAccess.getBoolTypeAccess().getGroup(), "rule__BoolType__Group__0");
					put(grammarAccess.getIntTypeAccess().getGroup(), "rule__IntType__Group__0");
					put(grammarAccess.getEnumTypeAccess().getGroup(), "rule__EnumType__Group__0");
					put(grammarAccess.getEnumTypeAccess().getGroup_2(), "rule__EnumType__Group_2__0");
					put(grammarAccess.getEnumTypeAccess().getGroup_2_1(), "rule__EnumType__Group_2_1__0");
					put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_1(), "rule__BooleanExpression__Group_1__0");
					put(grammarAccess.getAndBoolAccess().getGroup(), "rule__AndBool__Group__0");
					put(grammarAccess.getAndBoolAccess().getGroup_1(), "rule__AndBool__Group_1__0");
					put(grammarAccess.getSimpleBooleanAccess().getGroup_3(), "rule__SimpleBoolean__Group_3__0");
					put(grammarAccess.getNegationAccess().getGroup(), "rule__Negation__Group__0");
					put(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2(), "rule__ConfiguratorModel__NameAssignment_2");
					put(grammarAccess.getConfiguratorModelAccess().getFeatureAssignment_4(), "rule__ConfiguratorModel__FeatureAssignment_4");
					put(grammarAccess.getConfiguratorModelAccess().getFeatureAssignment_5(), "rule__ConfiguratorModel__FeatureAssignment_5");
					put(grammarAccess.getConfiguratorModelAccess().getRulesetAssignment_7(), "rule__ConfiguratorModel__RulesetAssignment_7");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0(), "rule__Feature__NameAssignment_0");
					put(grammarAccess.getFeatureAccess().getTypeAssignment_2(), "rule__Feature__TypeAssignment_2");
					put(grammarAccess.getFeatureAccess().getTextAssignment_3(), "rule__Feature__TextAssignment_3");
					put(grammarAccess.getOperatorAccess().getFeatureAssignment_0(), "rule__Operator__FeatureAssignment_0");
					put(grammarAccess.getOperatorAccess().getOpAssignment_1(), "rule__Operator__OpAssignment_1");
					put(grammarAccess.getOperatorAccess().getValueAssignment_2(), "rule__Operator__ValueAssignment_2");
					put(grammarAccess.getEnumTypeAccess().getValuesAssignment_2_0(), "rule__EnumType__ValuesAssignment_2_0");
					put(grammarAccess.getEnumTypeAccess().getValuesAssignment_2_1_1(), "rule__EnumType__ValuesAssignment_2_1_1");
					put(grammarAccess.getRuleSetAccess().getRuleAssignment_1(), "rule__RuleSet__RuleAssignment_1");
					put(grammarAccess.getRuleAccess().getNameAssignment_0(), "rule__Rule__NameAssignment_0");
					put(grammarAccess.getRuleAccess().getIfAssignment_2(), "rule__Rule__IfAssignment_2");
					put(grammarAccess.getRuleAccess().getThenAssignment_4(), "rule__Rule__ThenAssignment_4");
					put(grammarAccess.getRuleAccess().getTextAssignment_5(), "rule__Rule__TextAssignment_5");
					put(grammarAccess.getBooleanExpressionAccess().getBooleanexpressionAssignment_1_2(), "rule__BooleanExpression__BooleanexpressionAssignment_1_2");
					put(grammarAccess.getAndBoolAccess().getBooleanexpressionAssignment_1_2(), "rule__AndBool__BooleanexpressionAssignment_1_2");
					put(grammarAccess.getConstAccess().getValueAssignment(), "rule__Const__ValueAssignment");
					put(grammarAccess.getAtomAccess().getOperatorAssignment(), "rule__Atom__OperatorAssignment");
					put(grammarAccess.getNegationAccess().getBooleanexpressionAssignment_1(), "rule__Negation__BooleanexpressionAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalConfiguratorLangParser typedParser = (InternalConfiguratorLangParser) parser;
			typedParser.entryRuleConfiguratorModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ConfiguratorLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ConfiguratorLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
