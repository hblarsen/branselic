/*
 * generated by Xtext 2.10.0
 */
grammar InternalConfiguratorLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.branselic.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.branselic.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.branselic.services.ConfiguratorLangGrammarAccess;

}
@parser::members {
	private ConfiguratorLangGrammarAccess grammarAccess;

	public void setGrammarAccess(ConfiguratorLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleConfiguratorModel
entryRuleConfiguratorModel
:
{ before(grammarAccess.getConfiguratorModelRule()); }
	 ruleConfiguratorModel
{ after(grammarAccess.getConfiguratorModelRule()); } 
	 EOF 
;

// Rule ConfiguratorModel
ruleConfiguratorModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfiguratorModelAccess().getGroup()); }
		(rule__ConfiguratorModel__Group__0)
		{ after(grammarAccess.getConfiguratorModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getGroup()); }
		(rule__Feature__Group__0)
		{ after(grammarAccess.getFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperator
entryRuleOperator
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperatorAccess().getGroup()); }
		(rule__Operator__Group__0)
		{ after(grammarAccess.getOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpSymbol
entryRuleOpSymbol
:
{ before(grammarAccess.getOpSymbolRule()); }
	 ruleOpSymbol
{ after(grammarAccess.getOpSymbolRule()); } 
	 EOF 
;

// Rule OpSymbol
ruleOpSymbol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpSymbolAccess().getAlternatives()); }
		(rule__OpSymbol__Alternatives)
		{ after(grammarAccess.getOpSymbolAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolType
entryRuleBoolType
:
{ before(grammarAccess.getBoolTypeRule()); }
	 ruleBoolType
{ after(grammarAccess.getBoolTypeRule()); } 
	 EOF 
;

// Rule BoolType
ruleBoolType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolTypeAccess().getGroup()); }
		(rule__BoolType__Group__0)
		{ after(grammarAccess.getBoolTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntType
entryRuleIntType
:
{ before(grammarAccess.getIntTypeRule()); }
	 ruleIntType
{ after(grammarAccess.getIntTypeRule()); } 
	 EOF 
;

// Rule IntType
ruleIntType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntTypeAccess().getGroup()); }
		(rule__IntType__Group__0)
		{ after(grammarAccess.getIntTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumType
entryRuleEnumType
:
{ before(grammarAccess.getEnumTypeRule()); }
	 ruleEnumType
{ after(grammarAccess.getEnumTypeRule()); } 
	 EOF 
;

// Rule EnumType
ruleEnumType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumTypeAccess().getGroup()); }
		(rule__EnumType__Group__0)
		{ after(grammarAccess.getEnumTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleSet
entryRuleRuleSet
:
{ before(grammarAccess.getRuleSetRule()); }
	 ruleRuleSet
{ after(grammarAccess.getRuleSetRule()); } 
	 EOF 
;

// Rule RuleSet
ruleRuleSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleSetAccess().getGroup()); }
		(rule__RuleSet__Group__0)
		{ after(grammarAccess.getRuleSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getGroup()); }
		(rule__BooleanExpression__Group__0)
		{ after(grammarAccess.getBooleanExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndBool
entryRuleAndBool
:
{ before(grammarAccess.getAndBoolRule()); }
	 ruleAndBool
{ after(grammarAccess.getAndBoolRule()); } 
	 EOF 
;

// Rule AndBool
ruleAndBool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndBoolAccess().getGroup()); }
		(rule__AndBool__Group__0)
		{ after(grammarAccess.getAndBoolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getValueAssignment()); }
		(rule__Const__ValueAssignment)
		{ after(grammarAccess.getConstAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getOperatorAssignment()); }
		(rule__Atom__OperatorAssignment)
		{ after(grammarAccess.getAtomAccess().getOperatorAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleBoolean
entryRuleSimpleBoolean
:
{ before(grammarAccess.getSimpleBooleanRule()); }
	 ruleSimpleBoolean
{ after(grammarAccess.getSimpleBooleanRule()); } 
	 EOF 
;

// Rule SimpleBoolean
ruleSimpleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleBooleanAccess().getAlternatives()); }
		(rule__SimpleBoolean__Alternatives)
		{ after(grammarAccess.getSimpleBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegation
entryRuleNegation
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationAccess().getGroup()); }
		(rule__Negation__Group__0)
		{ after(grammarAccess.getNegationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolString
entryRuleBoolString
:
{ before(grammarAccess.getBoolStringRule()); }
	 ruleBoolString
{ after(grammarAccess.getBoolStringRule()); } 
	 EOF 
;

// Rule BoolString
ruleBoolString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolStringAccess().getAlternatives()); }
		(rule__BoolString__Alternatives)
		{ after(grammarAccess.getBoolStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntString
entryRuleIntString
:
{ before(grammarAccess.getIntStringRule()); }
	 ruleIntString
{ after(grammarAccess.getIntStringRule()); } 
	 EOF 
;

// Rule IntString
ruleIntString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntStringAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getIntStringAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__ValueAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getValueBoolStringParserRuleCall_2_0_0()); }
		ruleBoolString
		{ after(grammarAccess.getOperatorAccess().getValueBoolStringParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getValueIntStringParserRuleCall_2_0_1()); }
		ruleIntString
		{ after(grammarAccess.getOperatorAccess().getValueIntStringParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getValueIDTerminalRuleCall_2_0_2()); }
		RULE_ID
		{ after(grammarAccess.getOperatorAccess().getValueIDTerminalRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpSymbol__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpSymbolAccess().getEqualsSignKeyword_0()); }
		'='
		{ after(grammarAccess.getOpSymbolAccess().getEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpSymbolAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getOpSymbolAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOpSymbolAccess().getGreaterThanSignKeyword_2()); }
		'>'
		{ after(grammarAccess.getOpSymbolAccess().getGreaterThanSignKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getBoolTypeParserRuleCall_0()); }
		ruleBoolType
		{ after(grammarAccess.getTypeAccess().getBoolTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIntTypeParserRuleCall_1()); }
		ruleIntType
		{ after(grammarAccess.getTypeAccess().getIntTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_2()); }
		ruleEnumType
		{ after(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleBooleanAccess().getConstParserRuleCall_0()); }
		ruleConst
		{ after(grammarAccess.getSimpleBooleanAccess().getConstParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleBooleanAccess().getAtomParserRuleCall_1()); }
		ruleAtom
		{ after(grammarAccess.getSimpleBooleanAccess().getAtomParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleBooleanAccess().getNegationParserRuleCall_2()); }
		ruleNegation
		{ after(grammarAccess.getSimpleBooleanAccess().getNegationParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleBooleanAccess().getGroup_3()); }
		(rule__SimpleBoolean__Group_3__0)
		{ after(grammarAccess.getSimpleBooleanAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolStringAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getBoolStringAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolStringAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBoolStringAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__0__Impl
	rule__ConfiguratorModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getNameKeyword_0()); }
	'Name'
	{ after(grammarAccess.getConfiguratorModelAccess().getNameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__1__Impl
	rule__ConfiguratorModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getConfiguratorModelAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__2__Impl
	rule__ConfiguratorModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2()); }
	(rule__ConfiguratorModel__NameAssignment_2)
	{ after(grammarAccess.getConfiguratorModelAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__3__Impl
	rule__ConfiguratorModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getFeaturesKeyword_3()); }
	'Features'
	{ after(grammarAccess.getConfiguratorModelAccess().getFeaturesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__4__Impl
	rule__ConfiguratorModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getFeatureAssignment_4()); }
	(rule__ConfiguratorModel__FeatureAssignment_4)
	{ after(grammarAccess.getConfiguratorModelAccess().getFeatureAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__5__Impl
	rule__ConfiguratorModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getFeatureAssignment_5()); }
	(rule__ConfiguratorModel__FeatureAssignment_5)*
	{ after(grammarAccess.getConfiguratorModelAccess().getFeatureAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__6__Impl
	rule__ConfiguratorModel__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getRulesKeyword_6()); }
	'Rules'
	{ after(grammarAccess.getConfiguratorModelAccess().getRulesKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConfiguratorModel__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfiguratorModelAccess().getRulesetAssignment_7()); }
	(rule__ConfiguratorModel__RulesetAssignment_7)
	{ after(grammarAccess.getConfiguratorModelAccess().getRulesetAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getNameAssignment_0()); }
	(rule__Feature__NameAssignment_0)
	{ after(grammarAccess.getFeatureAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getFeatureAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__2__Impl
	rule__Feature__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getTypeAssignment_2()); }
	(rule__Feature__TypeAssignment_2)
	{ after(grammarAccess.getFeatureAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getTextAssignment_3()); }
	(rule__Feature__TextAssignment_3)?
	{ after(grammarAccess.getFeatureAccess().getTextAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__0__Impl
	rule__Operator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getFeatureAssignment_0()); }
	(rule__Operator__FeatureAssignment_0)
	{ after(grammarAccess.getOperatorAccess().getFeatureAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__1__Impl
	rule__Operator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getOpAssignment_1()); }
	(rule__Operator__OpAssignment_1)
	{ after(grammarAccess.getOperatorAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getValueAssignment_2()); }
	(rule__Operator__ValueAssignment_2)
	{ after(grammarAccess.getOperatorAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolType__Group__0__Impl
	rule__BoolType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolTypeAccess().getBoolAction_0()); }
	()
	{ after(grammarAccess.getBoolTypeAccess().getBoolAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }
	'bool'
	{ after(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntType__Group__0__Impl
	rule__IntType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntTypeAccess().getIntAction_0()); }
	()
	{ after(grammarAccess.getIntTypeAccess().getIntAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }
	'int'
	{ after(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__0__Impl
	rule__EnumType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getEnumAction_0()); }
	()
	{ after(grammarAccess.getEnumTypeAccess().getEnumAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__1__Impl
	rule__EnumType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getEnumTypeAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__2__Impl
	rule__EnumType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getGroup_2()); }
	(rule__EnumType__Group_2__0)?
	{ after(grammarAccess.getEnumTypeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getEnumTypeAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group_2__0__Impl
	rule__EnumType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getValuesAssignment_2_0()); }
	(rule__EnumType__ValuesAssignment_2_0)
	{ after(grammarAccess.getEnumTypeAccess().getValuesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getGroup_2_1()); }
	(rule__EnumType__Group_2_1__0)*
	{ after(grammarAccess.getEnumTypeAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group_2_1__0__Impl
	rule__EnumType__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getEnumTypeAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getValuesAssignment_2_1_1()); }
	(rule__EnumType__ValuesAssignment_2_1_1)
	{ after(grammarAccess.getEnumTypeAccess().getValuesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleSet__Group__0__Impl
	rule__RuleSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleSetAccess().getRuleSetAction_0()); }
	()
	{ after(grammarAccess.getRuleSetAccess().getRuleSetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleSetAccess().getRuleAssignment_1()); }
	(rule__RuleSet__RuleAssignment_1)*
	{ after(grammarAccess.getRuleSetAccess().getRuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_0()); }
	(rule__Rule__NameAssignment_0)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getRuleAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getIfAssignment_2()); }
	(rule__Rule__IfAssignment_2)
	{ after(grammarAccess.getRuleAccess().getIfAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
	'->'
	{ after(grammarAccess.getRuleAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getThenAssignment_4()); }
	(rule__Rule__ThenAssignment_4)
	{ after(grammarAccess.getRuleAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getTextAssignment_5()); }
	(rule__Rule__TextAssignment_5)?
	{ after(grammarAccess.getRuleAccess().getTextAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__0__Impl
	rule__BooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getAndBoolParserRuleCall_0()); }
	ruleAndBool
	{ after(grammarAccess.getBooleanExpressionAccess().getAndBoolParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getGroup_1()); }
	(rule__BooleanExpression__Group_1__0)*
	{ after(grammarAccess.getBooleanExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1__0__Impl
	rule__BooleanExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getOrBooleanexpressionAction_1_0()); }
	()
	{ after(grammarAccess.getBooleanExpressionAccess().getOrBooleanexpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1__1__Impl
	rule__BooleanExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getBooleanExpressionAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getBooleanexpressionAssignment_1_2()); }
	(rule__BooleanExpression__BooleanexpressionAssignment_1_2)
	{ after(grammarAccess.getBooleanExpressionAccess().getBooleanexpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndBool__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndBool__Group__0__Impl
	rule__AndBool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndBoolAccess().getSimpleBooleanParserRuleCall_0()); }
	ruleSimpleBoolean
	{ after(grammarAccess.getAndBoolAccess().getSimpleBooleanParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndBool__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndBoolAccess().getGroup_1()); }
	(rule__AndBool__Group_1__0)*
	{ after(grammarAccess.getAndBoolAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndBool__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndBool__Group_1__0__Impl
	rule__AndBool__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndBoolAccess().getAndBooleanexpressionAction_1_0()); }
	()
	{ after(grammarAccess.getAndBoolAccess().getAndBooleanexpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndBool__Group_1__1__Impl
	rule__AndBool__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndBoolAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndBoolAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndBool__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndBoolAccess().getBooleanexpressionAssignment_1_2()); }
	(rule__AndBool__BooleanexpressionAssignment_1_2)
	{ after(grammarAccess.getAndBoolAccess().getBooleanexpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleBoolean__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleBoolean__Group_3__0__Impl
	rule__SimpleBoolean__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBoolean__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleBooleanAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getSimpleBooleanAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBoolean__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleBoolean__Group_3__1__Impl
	rule__SimpleBoolean__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBoolean__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleBooleanAccess().getBooleanExpressionParserRuleCall_3_1()); }
	ruleBooleanExpression
	{ after(grammarAccess.getSimpleBooleanAccess().getBooleanExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBoolean__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleBoolean__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleBoolean__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleBooleanAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getSimpleBooleanAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group__0__Impl
	rule__Negation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getNotKeyword_0()); }
	'not'
	{ after(grammarAccess.getNegationAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getBooleanexpressionAssignment_1()); }
	(rule__Negation__BooleanexpressionAssignment_1)
	{ after(grammarAccess.getNegationAccess().getBooleanexpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConfiguratorModel__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfiguratorModelAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getConfiguratorModelAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__FeatureAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_4_0()); }
		ruleFeature
		{ after(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__FeatureAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_5_0()); }
		ruleFeature
		{ after(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfiguratorModel__RulesetAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfiguratorModelAccess().getRulesetRuleSetParserRuleCall_7_0()); }
		ruleRuleSet
		{ after(grammarAccess.getConfiguratorModelAccess().getRulesetRuleSetParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getTypeTypeParserRuleCall_2_0()); }
		ruleType
		{ after(grammarAccess.getFeatureAccess().getTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__TextAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getTextSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getFeatureAccess().getTextSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__FeatureAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getFeatureFeatureCrossReference_0_0()); }
		(
			{ before(grammarAccess.getOperatorAccess().getFeatureFeatureIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOperatorAccess().getFeatureFeatureIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getOperatorAccess().getFeatureFeatureCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getOpOpSymbolParserRuleCall_1_0()); }
		ruleOpSymbol
		{ after(grammarAccess.getOperatorAccess().getOpOpSymbolParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getValueAlternatives_2_0()); }
		(rule__Operator__ValueAlternatives_2_0)
		{ after(grammarAccess.getOperatorAccess().getValueAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__ValuesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getValuesIDTerminalRuleCall_2_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumTypeAccess().getValuesIDTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__ValuesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getValuesIDTerminalRuleCall_2_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumTypeAccess().getValuesIDTerminalRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_1_0()); }
		ruleRule
		{ after(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__IfAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getIfSimpleBooleanParserRuleCall_2_0()); }
		ruleSimpleBoolean
		{ after(grammarAccess.getRuleAccess().getIfSimpleBooleanParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getThenSimpleBooleanParserRuleCall_4_0()); }
		ruleSimpleBoolean
		{ after(grammarAccess.getRuleAccess().getThenSimpleBooleanParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__TextAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getTextSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getRuleAccess().getTextSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__BooleanexpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getBooleanexpressionAndBoolParserRuleCall_1_2_0()); }
		ruleAndBool
		{ after(grammarAccess.getBooleanExpressionAccess().getBooleanexpressionAndBoolParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndBool__BooleanexpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndBoolAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_2_0()); }
		ruleSimpleBoolean
		{ after(grammarAccess.getAndBoolAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getValueEBooleanParserRuleCall_0()); }
		ruleEBoolean
		{ after(grammarAccess.getConstAccess().getValueEBooleanParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__OperatorAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getOperatorOperatorParserRuleCall_0()); }
		ruleOperator
		{ after(grammarAccess.getAtomAccess().getOperatorOperatorParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__BooleanexpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_0()); }
		ruleSimpleBoolean
		{ after(grammarAccess.getNegationAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
