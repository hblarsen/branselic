/*
 * generated by Xtext 2.10.0
 */
grammar InternalConfiguratorLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.branselic.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.branselic.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.branselic.services.ConfiguratorLangGrammarAccess;

}

@parser::members {

 	private ConfiguratorLangGrammarAccess grammarAccess;

    public InternalConfiguratorLangParser(TokenStream input, ConfiguratorLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ConfiguratorModel";
   	}

   	@Override
   	protected ConfiguratorLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConfiguratorModel
entryRuleConfiguratorModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfiguratorModelRule()); }
	iv_ruleConfiguratorModel=ruleConfiguratorModel
	{ $current=$iv_ruleConfiguratorModel.current; }
	EOF;

// Rule ConfiguratorModel
ruleConfiguratorModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Name'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfiguratorModelAccess().getNameKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConfiguratorModelAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getConfiguratorModelAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfiguratorModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='Features'
		{
			newLeafNode(otherlv_3, grammarAccess.getConfiguratorModelAccess().getFeaturesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_4_0());
				}
				lv_feature_4_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
					}
					add(
						$current,
						"feature",
						lv_feature_4_0,
						"org.xtext.branselic.ConfiguratorLang.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_5_0());
				}
				lv_feature_5_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
					}
					add(
						$current,
						"feature",
						lv_feature_5_0,
						"org.xtext.branselic.ConfiguratorLang.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='Rules'
		{
			newLeafNode(otherlv_6, grammarAccess.getConfiguratorModelAccess().getRulesKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorModelAccess().getRulesetRuleSetParserRuleCall_7_0());
				}
				lv_ruleset_7_0=ruleRuleSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
					}
					set(
						$current,
						"ruleset",
						lv_ruleset_7_0,
						"org.xtext.branselic.ConfiguratorLang.RuleSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeatureAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.branselic.ConfiguratorLang.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_text_3_0=RULE_STRING
				{
					newLeafNode(lv_text_3_0, grammarAccess.getFeatureAccess().getTextSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current; }
	EOF;

// Rule Operator
ruleOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getOperatorAccess().getFeatureFeatureCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperatorAccess().getOpOpSymbolParserRuleCall_1_0());
				}
				lv_op_1_0=ruleOpSymbol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperatorRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"org.xtext.branselic.ConfiguratorLang.OpSymbol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperatorAccess().getValueBoolStringParserRuleCall_2_0_0());
					}
					lv_value_2_1=ruleBoolString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperatorRule());
						}
						set(
							$current,
							"value",
							lv_value_2_1,
							"org.xtext.branselic.ConfiguratorLang.BoolString");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOperatorAccess().getValueIntStringParserRuleCall_2_0_1());
					}
					lv_value_2_2=ruleIntString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperatorRule());
						}
						set(
							$current,
							"value",
							lv_value_2_2,
							"org.xtext.branselic.ConfiguratorLang.IntString");
						afterParserOrEnumRuleCall();
					}
					    |
					lv_value_2_3=RULE_ID
					{
						newLeafNode(lv_value_2_3, grammarAccess.getOperatorAccess().getValueIDTerminalRuleCall_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperatorRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_3,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOpSymbol
entryRuleOpSymbol returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpSymbolRule()); }
	iv_ruleOpSymbol=ruleOpSymbol
	{ $current=$iv_ruleOpSymbol.current.getText(); }
	EOF;

// Rule OpSymbol
ruleOpSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpSymbolAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpSymbolAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpSymbolAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getBoolTypeParserRuleCall_0());
		}
		this_BoolType_0=ruleBoolType
		{
			$current = $this_BoolType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getIntTypeParserRuleCall_1());
		}
		this_IntType_1=ruleIntType
		{
			$current = $this_IntType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_2());
		}
		this_EnumType_2=ruleEnumType
		{
			$current = $this_EnumType_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolType
entryRuleBoolType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolTypeRule()); }
	iv_ruleBoolType=ruleBoolType
	{ $current=$iv_ruleBoolType.current; }
	EOF;

// Rule BoolType
ruleBoolType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolTypeAccess().getBoolAction_0(),
					$current);
			}
		)
		otherlv_1='bool'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolTypeAccess().getBoolKeyword_1());
		}
	)
;

// Entry rule entryRuleIntType
entryRuleIntType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntTypeRule()); }
	iv_ruleIntType=ruleIntType
	{ $current=$iv_ruleIntType.current; }
	EOF;

// Rule IntType
ruleIntType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntTypeAccess().getIntAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntTypeAccess().getIntKeyword_1());
		}
	)
;

// Entry rule entryRuleEnumType
entryRuleEnumType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumTypeRule()); }
	iv_ruleEnumType=ruleEnumType
	{ $current=$iv_ruleEnumType.current; }
	EOF;

// Rule EnumType
ruleEnumType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumTypeAccess().getEnumAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumTypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					lv_values_2_0=RULE_ID
					{
						newLeafNode(lv_values_2_0, grammarAccess.getEnumTypeAccess().getValuesIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumTypeRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getEnumTypeAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						lv_values_4_0=RULE_ID
						{
							newLeafNode(lv_values_4_0, grammarAccess.getEnumTypeAccess().getValuesIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEnumTypeRule());
							}
							addWithLastConsumed(
								$current,
								"values",
								lv_values_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getEnumTypeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRuleSetAccess().getRuleSetAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_1_0());
				}
				lv_rule_1_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					add(
						$current,
						"rule",
						lv_rule_1_0,
						"org.xtext.branselic.ConfiguratorLang.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getIfSimpleBooleanParserRuleCall_2_0());
				}
				lv_if_2_0=ruleSimpleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"if",
						lv_if_2_0,
						"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getThenSimpleBooleanParserRuleCall_4_0());
				}
				lv_then_4_0=ruleSimpleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_text_5_0=RULE_STRING
				{
					newLeafNode(lv_text_5_0, grammarAccess.getRuleAccess().getTextSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getAndBoolParserRuleCall_0());
		}
		this_AndBool_0=ruleAndBool
		{
			$current = $this_AndBool_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getBooleanExpressionAccess().getOrBooleanexpressionAction_1_0(),
						$current);
				}
			)
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanExpressionAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanexpressionAndBoolParserRuleCall_1_2_0());
					}
					lv_booleanexpression_3_0=ruleAndBool
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
						}
						add(
							$current,
							"booleanexpression",
							lv_booleanexpression_3_0,
							"org.xtext.branselic.ConfiguratorLang.AndBool");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndBool
entryRuleAndBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndBoolRule()); }
	iv_ruleAndBool=ruleAndBool
	{ $current=$iv_ruleAndBool.current; }
	EOF;

// Rule AndBool
ruleAndBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndBoolAccess().getSimpleBooleanParserRuleCall_0());
		}
		this_SimpleBoolean_0=ruleSimpleBoolean
		{
			$current = $this_SimpleBoolean_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndBoolAccess().getAndBooleanexpressionAction_1_0(),
						$current);
				}
			)
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndBoolAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndBoolAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_2_0());
					}
					lv_booleanexpression_3_0=ruleSimpleBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndBoolRule());
						}
						add(
							$current,
							"booleanexpression",
							lv_booleanexpression_3_0,
							"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConstAccess().getValueEBooleanParserRuleCall_0());
			}
			lv_value_0_0=ruleEBoolean
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConstRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.branselic.ConfiguratorLang.EBoolean");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAtomAccess().getOperatorOperatorParserRuleCall_0());
			}
			lv_operator_0_0=ruleOperator
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAtomRule());
				}
				set(
					$current,
					"operator",
					lv_operator_0_0,
					"org.xtext.branselic.ConfiguratorLang.Operator");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSimpleBoolean
entryRuleSimpleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleBooleanRule()); }
	iv_ruleSimpleBoolean=ruleSimpleBoolean
	{ $current=$iv_ruleSimpleBoolean.current; }
	EOF;

// Rule SimpleBoolean
ruleSimpleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleBooleanAccess().getConstParserRuleCall_0());
		}
		this_Const_0=ruleConst
		{
			$current = $this_Const_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleBooleanAccess().getAtomParserRuleCall_1());
		}
		this_Atom_1=ruleAtom
		{
			$current = $this_Atom_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleBooleanAccess().getNegationParserRuleCall_2());
		}
		this_Negation_2=ruleNegation
		{
			$current = $this_Negation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getSimpleBooleanAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getSimpleBooleanAccess().getBooleanExpressionParserRuleCall_3_1());
			}
			this_BooleanExpression_4=ruleBooleanExpression
			{
				$current = $this_BooleanExpression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSimpleBooleanAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	iv_ruleNegation=ruleNegation
	{ $current=$iv_ruleNegation.current; }
	EOF;

// Rule Negation
ruleNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNegationAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegationAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_0());
				}
				lv_booleanexpression_1_0=ruleSimpleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegationRule());
					}
					add(
						$current,
						"booleanexpression",
						lv_booleanexpression_1_0,
						"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleBoolString
entryRuleBoolString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolStringRule()); }
	iv_ruleBoolString=ruleBoolString
	{ $current=$iv_ruleBoolString.current.getText(); }
	EOF;

// Rule BoolString
ruleBoolString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolStringAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolStringAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleIntString
entryRuleIntString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntStringRule()); }
	iv_ruleIntString=ruleIntString
	{ $current=$iv_ruleIntString.current.getText(); }
	EOF;

// Rule IntString
ruleIntString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getIntStringAccess().getINTTerminalRuleCall());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
