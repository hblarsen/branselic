/*
 * generated by Xtext 2.10.0
 */
grammar InternalConfiguratorLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.branselic.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.branselic.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.branselic.services.ConfiguratorLangGrammarAccess;

}

@parser::members {

 	private ConfiguratorLangGrammarAccess grammarAccess;

    public InternalConfiguratorLangParser(TokenStream input, ConfiguratorLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ConfiguratorModel";
   	}

   	@Override
   	protected ConfiguratorLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConfiguratorModel
entryRuleConfiguratorModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfiguratorModelRule()); }
	iv_ruleConfiguratorModel=ruleConfiguratorModel
	{ $current=$iv_ruleConfiguratorModel.current; }
	EOF;

// Rule ConfiguratorModel
ruleConfiguratorModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Features'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfiguratorModelAccess().getFeaturesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_1_0());
				}
				lv_feature_1_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
					}
					add(
						$current,
						"feature",
						lv_feature_1_0,
						"org.xtext.branselic.ConfiguratorLang.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorModelAccess().getFeatureFeatureParserRuleCall_2_0());
				}
				lv_feature_2_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
					}
					add(
						$current,
						"feature",
						lv_feature_2_0,
						"org.xtext.branselic.ConfiguratorLang.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='Rules'
		{
			newLeafNode(otherlv_3, grammarAccess.getConfiguratorModelAccess().getRulesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorModelAccess().getRulesetRuleSetParserRuleCall_4_0());
				}
				lv_ruleset_4_0=ruleRuleSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorModelRule());
					}
					set(
						$current,
						"ruleset",
						lv_ruleset_4_0,
						"org.xtext.branselic.ConfiguratorLang.RuleSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_Name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"Name",
						lv_Name_0_0,
						"org.xtext.branselic.ConfiguratorLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeatureAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getFeatureAccess().getTypeTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleOpSymbol
entryRuleOpSymbol returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpSymbolRule()); }
	iv_ruleOpSymbol=ruleOpSymbol
	{ $current=$iv_ruleOpSymbol.current.getText(); }
	EOF;

// Rule OpSymbol
ruleOpSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpSymbolAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpSymbolAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpSymbolAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleBoolType
entryRuleBoolType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolTypeRule()); }
	iv_ruleBoolType=ruleBoolType
	{ $current=$iv_ruleBoolType.current; }
	EOF;

// Rule BoolType
ruleBoolType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolTypeAccess().getBoolAction_0(),
					$current);
			}
		)
		otherlv_1='bool'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolTypeAccess().getBoolKeyword_1());
		}
	)
;

// Entry rule entryRuleIntType
entryRuleIntType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntTypeRule()); }
	iv_ruleIntType=ruleIntType
	{ $current=$iv_ruleIntType.current; }
	EOF;

// Rule IntType
ruleIntType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntTypeAccess().getIntAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntTypeAccess().getIntKeyword_1());
		}
	)
;

// Entry rule entryRuleEnumType
entryRuleEnumType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumTypeRule()); }
	iv_ruleEnumType=ruleEnumType
	{ $current=$iv_ruleEnumType.current; }
	EOF;

// Rule EnumType
ruleEnumType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumTypeAccess().getEnumAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumTypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumTypeAccess().getValuesEStringParserRuleCall_2_0_0());
					}
					lv_values_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumTypeRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.xtext.branselic.ConfiguratorLang.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getEnumTypeAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumTypeAccess().getValuesEStringParserRuleCall_2_1_1_0());
						}
						lv_values_4_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumTypeRule());
							}
							add(
								$current,
								"values",
								lv_values_4_0,
								"org.xtext.branselic.ConfiguratorLang.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getEnumTypeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRuleSetAccess().getRuleSetAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getRuleRuleParserRuleCall_1_0());
				}
				lv_rule_1_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					add(
						$current,
						"rule",
						lv_rule_1_0,
						"org.xtext.branselic.ConfiguratorLang.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getIfBooleanExpressionParserRuleCall_0_0());
				}
				lv_if_0_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"if",
						lv_if_0_0,
						"org.xtext.branselic.ConfiguratorLang.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getThenBooleanExpressionParserRuleCall_2_0());
				}
				lv_then_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"then",
						lv_then_2_0,
						"org.xtext.branselic.ConfiguratorLang.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getConstParserRuleCall_0());
		}
		this_Const_0=ruleConst
		{
			$current = $this_Const_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getAtomParserRuleCall_1());
		}
		this_Atom_1=ruleAtom
		{
			$current = $this_Atom_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getAndParserRuleCall_2());
		}
		this_And_2=ruleAnd
		{
			$current = $this_And_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getNegationParserRuleCall_3());
		}
		this_Negation_3=ruleNegation
		{
			$current = $this_Negation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConstAccess().getValueEBooleanParserRuleCall_0());
			}
			lv_value_0_0=ruleEBoolean
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConstRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.branselic.ConfiguratorLang.EBoolean");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAtomRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getAtomAccess().getOperatorOperatorCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleSimpleBoolean
entryRuleSimpleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleBooleanRule()); }
	iv_ruleSimpleBoolean=ruleSimpleBoolean
	{ $current=$iv_ruleSimpleBoolean.current; }
	EOF;

// Rule SimpleBoolean
ruleSimpleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleBooleanAccess().getConstParserRuleCall_0());
		}
		this_Const_0=ruleConst
		{
			$current = $this_Const_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleBooleanAccess().getAtomParserRuleCall_1());
		}
		this_Atom_1=ruleAtom
		{
			$current = $this_Atom_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getSimpleBooleanAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getSimpleBooleanAccess().getBooleanExpressionParserRuleCall_2_1());
			}
			this_BooleanExpression_3=ruleBooleanExpression
			{
				$current = $this_BooleanExpression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getSimpleBooleanAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	iv_ruleNegation=ruleNegation
	{ $current=$iv_ruleNegation.current; }
	EOF;

// Rule Negation
ruleNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNegationAccess().getNotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegationAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_0());
				}
				lv_booleanexpression_1_0=ruleSimpleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegationRule());
					}
					set(
						$current,
						"booleanexpression",
						lv_booleanexpression_1_0,
						"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getBooleanexpressionSimpleBooleanParserRuleCall_0_0());
				}
				lv_booleanexpression_0_0=ruleSimpleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					add(
						$current,
						"booleanexpression",
						lv_booleanexpression_0_0,
						"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='and'
		{
			newLeafNode(otherlv_1, grammarAccess.getAndAccess().getAndKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getBooleanexpressionSimpleBooleanParserRuleCall_2_0());
				}
				lv_booleanexpression_2_0=ruleSimpleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					add(
						$current,
						"booleanexpression",
						lv_booleanexpression_2_0,
						"org.xtext.branselic.ConfiguratorLang.SimpleBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
