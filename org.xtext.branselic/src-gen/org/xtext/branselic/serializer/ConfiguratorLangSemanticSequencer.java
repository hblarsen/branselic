/*
 * generated by Xtext 2.10.0
 */
package org.xtext.branselic.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.branselic.domainmodel.And;
import org.xtext.branselic.domainmodel.Atom;
import org.xtext.branselic.domainmodel.Bool;
import org.xtext.branselic.domainmodel.ConfiguratorModel;
import org.xtext.branselic.domainmodel.Const;
import org.xtext.branselic.domainmodel.DomainmodelPackage;
import org.xtext.branselic.domainmodel.Feature;
import org.xtext.branselic.domainmodel.Int;
import org.xtext.branselic.domainmodel.Negation;
import org.xtext.branselic.domainmodel.Operator;
import org.xtext.branselic.domainmodel.Or;
import org.xtext.branselic.domainmodel.Rule;
import org.xtext.branselic.domainmodel.RuleSet;
import org.xtext.branselic.services.ConfiguratorLangGrammarAccess;

@SuppressWarnings("all")
public class ConfiguratorLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConfiguratorLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DomainmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainmodelPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case DomainmodelPackage.ATOM:
				sequence_Atom(context, (Atom) semanticObject); 
				return; 
			case DomainmodelPackage.BOOL:
				sequence_BoolType(context, (Bool) semanticObject); 
				return; 
			case DomainmodelPackage.CONFIGURATOR_MODEL:
				sequence_ConfiguratorModel(context, (ConfiguratorModel) semanticObject); 
				return; 
			case DomainmodelPackage.CONST:
				sequence_Const(context, (Const) semanticObject); 
				return; 
			case DomainmodelPackage.ENUM:
				sequence_EnumType(context, (org.xtext.branselic.domainmodel.Enum) semanticObject); 
				return; 
			case DomainmodelPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case DomainmodelPackage.INT:
				sequence_IntType(context, (Int) semanticObject); 
				return; 
			case DomainmodelPackage.NEGATION:
				sequence_Negation(context, (Negation) semanticObject); 
				return; 
			case DomainmodelPackage.OPERATOR:
				sequence_Operator(context, (Operator) semanticObject); 
				return; 
			case DomainmodelPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case DomainmodelPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case DomainmodelPackage.RULE_SET:
				sequence_RuleSet(context, (RuleSet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BooleanExpression returns And
	 *     SimpleBoolean returns And
	 *     And returns And
	 *
	 * Constraint:
	 *     (booleanexpression+=SimpleBoolean booleanexpression+=SimpleBoolean)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns Atom
	 *     Atom returns Atom
	 *     SimpleBoolean returns Atom
	 *
	 * Constraint:
	 *     operator=Operator
	 */
	protected void sequence_Atom(ISerializationContext context, Atom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.ATOM__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.ATOM__OPERATOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomAccess().getOperatorOperatorParserRuleCall_0(), semanticObject.getOperator());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Bool
	 *     BoolType returns Bool
	 *
	 * Constraint:
	 *     {Bool}
	 */
	protected void sequence_BoolType(ISerializationContext context, Bool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfiguratorModel returns ConfiguratorModel
	 *
	 * Constraint:
	 *     (name=STRING feature+=Feature feature+=Feature* ruleset=RuleSet)
	 */
	protected void sequence_ConfiguratorModel(ISerializationContext context, ConfiguratorModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns Const
	 *     Const returns Const
	 *     SimpleBoolean returns Const
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_Const(ISerializationContext context, Const semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.CONST__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.CONST__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Enum
	 *     EnumType returns Enum
	 *
	 * Constraint:
	 *     (values+=ID values+=ID*)?
	 */
	protected void sequence_EnumType(ISerializationContext context, org.xtext.branselic.domainmodel.Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (name=ID type=Type text=STRING?)
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Int
	 *     IntType returns Int
	 *
	 * Constraint:
	 *     {Int}
	 */
	protected void sequence_IntType(ISerializationContext context, Int semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns Negation
	 *     SimpleBoolean returns Negation
	 *     Negation returns Negation
	 *
	 * Constraint:
	 *     booleanexpression=SimpleBoolean
	 */
	protected void sequence_Negation(ISerializationContext context, Negation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.NEGATION__BOOLEANEXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.NEGATION__BOOLEANEXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNegationAccess().getBooleanexpressionSimpleBooleanParserRuleCall_1_0(), semanticObject.getBooleanexpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operator returns Operator
	 *
	 * Constraint:
	 *     (feature=[Feature|ID] op=OpSymbol value=ID)
	 */
	protected void sequence_Operator(ISerializationContext context, Operator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.OPERATOR__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.OPERATOR__FEATURE));
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.OPERATOR__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.OPERATOR__OP));
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.OPERATOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.OPERATOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperatorAccess().getFeatureFeatureIDTerminalRuleCall_0_0_1(), semanticObject.getFeature());
		feeder.accept(grammarAccess.getOperatorAccess().getOpOpSymbolParserRuleCall_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getOperatorAccess().getValueIDTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Or returns Or
	 *
	 * Constraint:
	 *     (booleanexpression+=SimpleBoolean booleanexpression+=SimpleBoolean)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuleSet returns RuleSet
	 *
	 * Constraint:
	 *     rule+=Rule*
	 */
	protected void sequence_RuleSet(ISerializationContext context, RuleSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ID? if=SimpleBoolean then=SimpleBoolean text=STRING?)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
